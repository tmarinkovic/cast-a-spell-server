group 'tommy.castaspellserver'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

application {
    mainClassName = 'cast.a.spell.Application'
}

bootJar {
    baseName = 'cast-a-spell-server'
    version = '0.1.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.webjars:webjars-locator-core")
    compile("org.webjars:sockjs-client:1.0.2")
    compile("org.webjars:stomp-websocket:2.3.3")
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.18.0'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

sourceSets {
    test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output
            compileClasspath += main.compileClasspath
            compileClasspath += test.output
            compileClasspath += test.compileClasspath
            runtimeClasspath += test.runtimeClasspath
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

ext {
    awsProfile = "tmarinkovic"
    appName = "cast-a-spell-server"
}

task createResources(type: Exec) {
    commandLine 'sh', './script/create-resources.sh', awsProfile, appName
}

task destroyResources(type: Exec) {
    commandLine 'sh', './script/destroy-resources.sh', awsProfile, appName
}

task deploy(type: Exec) {
    commandLine 'sh', './script/deploy.sh', awsProfile, appName
}

integrationTest.dependsOn test
deploy.dependsOn integrationTest